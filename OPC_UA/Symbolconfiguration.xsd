<?xml version="1.0" encoding="UTF-8"?>
<!--CODESYS Version: 3.5.14.0 and higher-->
<!--Last change: 2018-08-23-->
<xs:schema version="3.5.14.0" targetNamespace="http://www.3s-software.com/schemas/Symbolconfiguration.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns="http://www.3s-software.com/schemas/Symbolconfiguration.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Description of the XML export files for the Symbol Configuration.
      Some of the elements are not always available, depending on the CODESYS version, compiler version, target settings,
      runtime version, chosen features in the symbol config editor and other circumstances.

      CAUTION!
      
      While we try to keep existing content compatible across versions, we reserve the right to extend 
      the XML file with additional elements and attributes at any time, so your parsers should be tolerant
      and ignore unknown content.    
  
      </xs:documentation>
  </xs:annotation>
  <xs:element name="ArrayDim">
    <xs:annotation>
      <xs:documentation>Describes one array dimension</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="minrange" type="xs:integer" use="required"/>
      <xs:attribute name="maxrange" type="xs:integer" use="required"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="Header">
    <xs:annotation>
      <xs:documentation>Header informations from the project source</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Version">
          <xs:annotation>
            <xs:documentation>
              This refers to the version of the schema which is/was current when the 
              generating CODESYS version was released, and this document should validate against.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="SymbolConfigObject"/>
        <xs:element ref="ProjectInfo"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Symbolconfiguration">
    <xs:annotation>
      <xs:documentation>ROOT node for all symbolic data</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Header"/>
        <xs:element ref="TypeList"/>
        <xs:element ref="NodeList" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>The list of actually exported nodes. This tag is not present if no nodes
            are exported.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:simpleType name="NamespaceNodeFlags">
    <xs:restriction base="xs:string">
      <!-- Only the NamespaceNodeFlags values which should actually appear in XML are defined here.
           Also, several seemingly conflicting flags may appear - e. G. there may be a POU called
         Application.FOO as well as some explicit namespace declarations for Application.FOO.
         Some of the values are not yet generated by the current code, but are very likely to be
         introduced in future updates.
         -->
      <xs:enumeration value="NodeTypeBranchNode">
        <xs:annotation>
          <xs:documentation>This node is part of the path. It is usually combined with one of the flags below.</xs:documentation>
        </xs:annotation> 
      </xs:enumeration>
      <xs:enumeration value="BranchNodeApplicationName">
        <xs:annotation>
          <xs:documentation>An application name. (May appear on several levels, as apps may be nested.)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BranchNodeLibraryNamespace">
        <xs:annotation>
          <xs:documentation>A library namespace. (May appear on several levels, as libraries may be nested.)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BranchNodeExplicitNamespace">
        <xs:annotation>
          <xs:documentation>A path component explicitly specified via {attribute 'namespace' := 'foo.bar'}</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BranchNodeMemberAccess">
        <xs:annotation>
          <xs:documentation>In the future, we might we allow non-top level nodes like foo.bar.baz to be exported directly, probably combined with one of the flags below.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeGvl">
        <xs:annotation>
          <xs:documentation>A global variable list.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeProgram">
        <xs:annotation>
          <xs:documentation>A program</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeFB">
        <xs:annotation>
          <xs:documentation>FBs may actually export var_static, and in the future when we allow non-top-level nodes to be exported.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeStruct">
        <xs:annotation>
          <xs:documentation>For future extension, when we allow non-top-level nodes to be exported.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeMethod">
        <xs:annotation>
          <xs:documentation>For future extension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeAction">
        <xs:annotation>
          <xs:documentation>For future extension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeProperty">
        <xs:annotation>
          <xs:documentation>For future extension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeTransition">
        <xs:annotation>
          <xs:documentation>For future extension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SigTypeFunction">
        <xs:annotation>
          <xs:documentation>Functions may also define static variables which may be exportable.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ExportedVariable">
        <xs:annotation>
          <xs:documentation>Denotes a normal exported variable.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ExportedStaticVariable">
        <xs:annotation>
          <xs:documentation>The variable is a "static" variable which is exported e. G. from an FB which is used in the program.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ExportedPropertyVariable">
        <xs:annotation>
          <xs:documentation>The variable represents a property.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
        <xs:enumeration value="NodeHasExecutableChildren">
            <xs:annotation>
                <xs:documentation>
                    This node has executable children. Some interfaces (e. g. PLCHandler) need to take special
                    precautions for clients which cannot cope with executable children. This flag is mainly for
                    optimization purposes, as it allows to skip the workarounds on nodes without executable children.
                </xs:documentation>
            </xs:annotation>
        </xs:enumeration>
    </xs:restriction>		
  </xs:simpleType>
  <xs:simpleType name="CommentType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NormalComment">
        <xs:annotation>
          <xs:documentation>This comment is a "normal comment" - those delimited with // or (* *).</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DocumentationComment">
        <xs:annotation>
          <xs:documentation>
            This comment is a "documentation comment" - those delimited with /// and usually
            formatted in ReST (ReStructured Text), used for library documentation.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:element name="Comment">
    <xs:annotation>
      <xs:documentation>A comment which was written in the source code.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute name="type" type="CommentType">
            <xs:annotation>
              <xs:documentation>
                Whether this comment is a docu comment or normal comment.
                (This value is implemented since V3.5.9.0, and for backwards compatibility reasons, it is
                only generated if the symbol config is configured to export both normal and docu comments.)</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="Attribute">
    <xs:annotation>
      <xs:documentation>An attribute which was declared in the source code. It's defined with the {attribute 'name':='value'} pragma in the sourcecode.</xs:documentation>
    </xs:annotation>
    <xs:simpleType>      
      <xs:restriction base="xs:string">
        <xs:pattern value="([A-Za-z0-9\._]|(\p{L}|\p{Nd})-\p{IsBasicLatin})*:=[.\s\S]*">
          <xs:annotation>
            <xs:documentation>
              An attribute always has a name followed by ":=", and then optionally
              a value which may be an arbitrary string (and itself include arbitrary characters like ":=", newlines etc.).
              The name are ASCII letters A-Z and a-z, ASCII digits 0-9, fullstops '.' and underscores '_',
              as well as any non-ASCII codepoint which Unicode regards as letter or digit.
              It's defined with the {attribute 'name':='value'} pragma in the sourcecode.
              (For backwards compatibility reasons, this is not output as "name" and "value" attributes.)
            </xs:documentation>
          </xs:annotation>
        </xs:pattern>
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
  <xs:element name="Node">
    <xs:annotation>
      <xs:documentation>One symbolic node in the symbolic tree - this may be either:
       A container node representing an application name, pou name, gvl name or explicit namespace, it will contain other nodes.
       Or a leaf node defining an exported variable, not containing other nodes.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded">          
          <xs:annotation>
            <xs:documentation>The comment(s) applicable to this node. (Multiple comments may appear when explicit namespace declarations are used, or normal and docu comments are included.)</xs:documentation>
          </xs:annotation>          
        </xs:element>				
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>The list of attributes defined for this node. (They're usually defined with the {attribute 'name':='value'} pragma in the sourcecode.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Node" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>The list of child nodes if this node is a container node.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="type" type="xs:string"/>
      <xs:attribute name="calltype" type="xs:string">
        <xs:annotation>
          <xs:documentation>The reference to the TypeCallable element representing the call. We intentionally do not use the attribute 'type' here to reduce the risk of parser confusion.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="access" type="AccessMode"/>						
      <xs:attribute name="area" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The memory area the variable is contained in in the internal IEC / compiler memory layout (only available with the generate_address_info target setting).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="offset" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The byte offset of the variable within the area in the internal IEC / compiler memory layout (only available with the generate_address_info target setting).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="directaddress" type="xs:string">
        <xs:annotation>
          <xs:documentation>The direct iec address of the variable, in the form "%MX3.5", if applicable.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="nodeflags">
        <xs:simpleType>
          <xs:list itemType="NamespaceNodeFlags"/>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="propertytype" type="PropertyType">
        <xs:annotation>
          <xs:documentation>Describes this variable as a property, the type corresponds to the monitoring type declared in the source via {attribute 'monitoring':='...'} and can currently be "call" or "variable"</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="referencetype" type="xs:string">
        <xs:annotation>
          <xs:documentation>When the variable is of type "REFERENCE TO INT", for example, then the type attribute will contain T_INT as the reference basetype. The actual type of the variable is then stored in this attribute.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="NodeList">
    <xs:annotation>
      <xs:documentation>List of all symbolic node</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Node" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ProjectInfo">
    <xs:annotation>
      <xs:documentation>Project informations from the project source</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="devicename" type="xs:string" use="required"/>
      <xs:attribute name="appname" type="xs:string" use="required"/>
      <xs:attribute name="codeguid" type="xs:string">
        <xs:annotation>
          <xs:documentation>The CodeGuid of the Application, is generated when the setting symbolconfiguration/generate_address_info is active.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dataguid" type="xs:string">
        <xs:annotation>
          <xs:documentation>The DataGuid of the Application, is generated when the setting symbolconfiguration/generate_address_info is active.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="SymbolConfigObject">
    <xs:annotation>
      <xs:documentation>Internal component of CoDeSys that generates this informations</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="version" use="required" type="Version">
        <xs:annotation>
          <xs:documentation>Version of the symbol config plugin used to generate this XML file.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="runtimeid" type="Version">
        <xs:annotation>
          <xs:documentation>Runtime version according to the target setting "runtime_identification\version".</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="libversion" type="Version">
        <xs:annotation>
          <xs:documentation>Effective version of the IecVarAccess library used during code generation, for debugging purposes.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="compiler" type="Version">
        <xs:annotation>
          <xs:documentation>Effective compiler version setting during generation, for debugging purposes (since V3.5.11.0).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lmm" type="Version">
        <xs:annotation>
          <xs:documentation>Assembly version of the LMM, for debugging purposes (since V3.5.11.0).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="profile" type="xs:string">
        <xs:annotation>
          <xs:documentation>Active profile of the generator, for debugging purposes (since V3.5.11.0). The suffix " +" is added when extensions are installed.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="settings" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Further options and settings in the Symbolconfig (mainly for debugging purposes), you should not
            rely on any particular contents of this string in your code, as it's implementation dependent and
            may change at any time.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="TypeArray">
    <xs:annotation>
      <xs:documentation>Describes an array type</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="ArrayDim" minOccurs="1" maxOccurs="3"/>        
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              Comments and attributes may appear since V3.5.9.0 for alias types of arrays,
              the comments of the Alias type appear here, as the alias types disguise as their
              base type. To lower the probability of compatibility problems, we put them at the end.
              Two comment tags may be present when the user configures
              the selection to include both normal and docu comments.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              Comments and attributes may appear since V3.5.9.0 for alias types of arrays,
              the attributes of the Alias type appear here, as the alias types disguise as their
              base type. To lower the probability of compatibility problems, we put them at the end.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="size" type="xs:integer" use="required"/>
      <xs:attribute name="nativesize" type="xs:integer" use="required"/>
      <xs:attribute name="typeclass" type="xs:string" use="required"/>
      <xs:attribute name="basetype" type="xs:string" use="required"/>
      <xs:attribute name="iecname" type="xs:string" use="required"/>
      <xs:attribute name="aliasedtype" type="xs:string"/>
      <xs:attribute name="aliasediecname" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="TypeList">
    <xs:annotation>
      <xs:documentation>List of all used types</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="TypeSimple"/>
        <xs:element ref="TypeUserDef"/>
        <xs:element ref="TypeArray"/>
        <xs:element ref="TypeCallable"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="TypeSimple">
    <xs:annotation>
      <xs:documentation>Describes a simple type</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              Comments and attributes may appear since V3.5.9.0 for alias types of simple types,
              the comments of the Alias type appear here, as the alias types disguise as their
              base type.
              Two comment tags may be present when the user configures
              the selection to include both normal and docu comments.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              Comments and attributes may appear since V3.5.9.0 for alias types of simple types,
              the attributes of the Alias type appear here, as the alias types disguise as their
              base type.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="size" type="xs:integer" use="required"/>
      <xs:attribute name="swapsize" type="xs:integer" use="required"/>
      <xs:attribute name="typeclass" type="xs:string" use="required"/>
      <xs:attribute name="iecname" type="xs:string" use="required"/>
      <xs:attribute name="basetype" type="xs:string"/>
      <xs:attribute name="bitoffset" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The bit offset for bit field values in the internal IEC memory layout.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="aliasedtype" type="xs:string"/>
      <xs:attribute name="aliasediecname" type="xs:string"/>
      <xs:attribute name="underlyingtype" type="xs:string">
        <xs:annotation>
          <xs:documentation>The underlying type of a subrange type.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lowerborder" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The lower border/limit of a subrange type.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="upperborder" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The upper border/limit of a subrange type.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="TypeUserDef">
    <xs:annotation>
      <xs:documentation>Describes a user defined type (like structure or functionblock)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>More than one comment tags may be present when the user configures
            the selection to include both normal and docu comments, and/or the type is an alias to
            a userdef type, so the comments of both the alias declaration and the user def type are
            retained.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="UserDefElement" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="CallableElement" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="size" type="xs:integer" use="required"/>
      <xs:attribute name="nativesize" type="xs:integer" use="required"/>
      <xs:attribute name="swapsize" type="xs:integer"/>
      <xs:attribute name="typeclass" type="xs:string" use="required"/>
      <xs:attribute name="pouclass" type="PouClass"/>			
      <xs:attribute name="iecname" type="xs:string" use="required"/>
      <xs:attribute name="basetype" type="xs:string"/>
      <xs:attribute name="aliasedtype" type="xs:string"/>
      <xs:attribute name="aliasediecname" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="TypeCallable">
    <xs:annotation>
      <xs:documentation>Describes a callable entity, like Methods, Actions, FBs, Programs, and Functions.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>
              More than one comment tags may be present when the user configures
              the selection to include both normal and docu comments, and/or the type is an alias to
              a userdef type, so the comments of both the alias declaration and the user def type are
              retained.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element ref="UserDefElement" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>Each of those elements here represents a parameter or return value of
            the function, method, FB or program.</xs:documentation>
          </xs:annotation>
          </xs:element>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="size" type="xs:integer" use="required">
        <xs:annotation>
          <xs:documentation>Size of the parameter data struct used to transfer parameters and results.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="nativesize" type="xs:integer" use="required">
        <xs:annotation>
          <xs:documentation>Internal size of the parameter data struct, mostly for informational purposes.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="typeclass" type="xs:string" use="required"/>
      <xs:attribute name="pouclass" type="PouClass" use="required"/>
      <xs:attribute name="iecname" type="xs:string" use="required"/>
      <xs:attribute name="containingtype" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>
            Refers to the type defining the executable - e. G. to the Function Block. Note that there is no
            type node for "top level" signatures like FUNCTIONs or PROGRAMs, as they're not in
            the type list, only their elements are part of the node tree.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="containingbase" type="xs:string">
        <xs:annotation>
          <xs:documentation>Refers to the base type of the containing type, if the containing type is derived.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="UserDefElement">
    <xs:annotation>
      <xs:documentation>Describes one element of a user defined type</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="2">
          <xs:annotation>
            <xs:documentation>
              Two comment tags may be present when the user configures
              the selection to include both normal and docu comments.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="type" type="xs:string" use="required"/>
      <xs:attribute name="iecname" type="xs:string" use="required"/>
      <xs:attribute name="byteoffset" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The byte offset of the member in the network layout used by the SymbolConfig / IecVarAccess.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="vartype" type="VarScopeType"/>
      <xs:attribute name="enumvalue" type="xs:string"/>
      <xs:attribute name="compileroffset" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The byte offset of the member in the internal IEC / compiler memory layout (only available with the generate_address_info target setting).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="bitoffset" type="xs:integer">
        <xs:annotation>
          <xs:documentation>The bit offset for bit values in the internal IEC memory layout (only available with the generate_address_info target setting).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="inherited_from" type="xs:string">
        <xs:annotation>
          <xs:documentation>Points to the base type this member is inherited from when the member was defined in a base type.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="propertytype" type="PropertyType">
        <xs:annotation>
          <xs:documentation>Describes this variable as a property, the type corresponds to the monitoring type declared in the source via {attribute 'monitoring':='...'} and can currently be "call" or "variable"</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="CallableElement">
    <xs:annotation>
      <xs:documentation>
        Describes a callable / executable element of a user defined type which can be
        called from outside via IecVarAccess / OPC UA. We intentionally use a
        new tag name and mostly different attribute names, to protect old parsers
        against misinterpreting the elements. (Since V3.5.11.0)
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Comment" minOccurs="0" maxOccurs="2">
          <xs:annotation>
            <xs:documentation>
              Two comment tags may be present when the user configures
              the selection to include both normal and docu comments.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="iecname" type="xs:string" use="required">
        <xs:annotation>
          <xs:documentation>
            For methods, this is the name of the method. For calls to functions, FBs and PROGRAMs, the
            iecname is "__Main", similar to the name used in the M4 export for the runtime.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="type" type="xs:string" use="required"/>
      <xs:attribute name="inherited_from" type="xs:string">
        <xs:annotation>
          <xs:documentation>Points to the base type this member is inherited from when the member was defined in a base type.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Version" type="Version">
    <xs:annotation>
      <xs:documentation>Version of the symbolic export. This refers to the version of this XSD schema file corresponding to the generated XML.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="VarScopeType" id="VarScopeType">
    <xs:annotation>
      <xs:documentation>The scope type of a variable.</xs:documentation> 
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="VAR_INPUT|VAR_OUTPUT|VAR_IN_OUT|VAR">
        <xs:annotation>
          <xs:documentation>
            This pattern used to contain the wrong keyword VAR_INOUT. CODESYS always generated the correct VAR_IN_OUT
            keyword, so the XSD was fixed to reflect the reality.
          </xs:documentation>
        </xs:annotation>
      </xs:pattern>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PouClass" id="PouClass">
    <xs:annotation>
      <xs:documentation>The scope type of a variable.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="FUNCTION|FUNCTION_BLOCK|PROGRAM|STRUCTURE|UNION|METHOD|ACTION"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AccessMode" id="AccessMode">
    <xs:annotation>
      <xs:documentation>The actual access permitted to the variable.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="Read|Write|ReadWrite|Execute|ReadExecute|WriteExecute|ReadWriteExecute"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PropertyType" id="PropertyType">
    <xs:annotation>
      <xs:documentation>The monitoring type of the property as given by the compiler.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="call|variable"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="Version" id="Version">
    <xs:annotation>
      <xs:documentation>Datatype for a version tuple of 2-4 integers.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="\d+(\.\d+){1,3}"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
